(()=>{"use strict";var t={972:(t,e)=>{function s(t,e){return Math.floor(100*Math.random())+1}Object.defineProperty(e,"__esModule",{value:!0}),e.SquareGrid=e.Graph=e.genWeight=void 0,e.genWeight=s;class i{constructor(){this.adjacencyList=new Map}getVertexKey(t){return t.toString()}StringToVertex(t){return t.split(",").map(Number)}addVertex(t){const e=this.getVertexKey(t);this.adjacencyList.has(e)||this.adjacencyList.set(e,[])}addEdge(t,e,s){const i=this.getVertexKey(t),r=this.getVertexKey(e);this.adjacencyList.get(i).push({node:r,weight:s}),this.adjacencyList.get(i).push({node:r,weight:s})}printGraph(){for(let[t,e]of this.adjacencyList){const s=e.map((t=>`${t.node}(${t.weight})`)).join(", ");console.log(`${t} -> ${s}`)}}}e.Graph=i,e.SquareGrid=class extends i{constructor(t,e,s){super(),this.center=[Math.ceil(t/2),Math.ceil(e/2)],this.x_step=s.windowWidth/t,this.y_step=s.windowHeight/e,this.x_offset=this.x_step/2,this.y_offset=this.y_step/2,this.generateSquareGrid(t,e),this.vertCoordinates=this.generateSquareDistances(t,e)}printGraph(){console.log(`The grid with center at ${this.center} has the following graph:`),super.printGraph()}generateSquareGrid(t,e){for(let i=0;i<t;i++)for(let t=0;t<e;t++){const e=[i,t];if(this.addVertex(e),i>0){const r=[i-1,t],o=s();this.addEdge(e,r,o)}if(t>0){const r=[i,t-1],o=s();this.addEdge(e,r,o)}}}generateSquareDistances(t,e){let s=new Map;for(let i=0;i<t;i++)for(let t=0;t<e;t++)s.set(this.getVertexKey([i,t]),[this.x_offset+i*this.x_step,this.y_offset+t*this.y_step]);return s}drawNode(t,e,s=100){const i=this.vertCoordinates.get(e);t.ellipse(i[0],i[1],this.x_step/3,this.y_step/3),t.fill(s)}drawEdge(t,e,s,i,r){const o=this.vertCoordinates.get(e),n=this.vertCoordinates.get(s);t.line(o[0],o[1],n[0],n[1]),t.stroke(50),"x"==r?t.strokeWeight(this.x_step/3):t.strokeWeight(this.y_step/3),t.textSize(20),t.textAlign(t.CENTER,t.CENTER),t.text(i.weight,(o[0]+n[0])/2,(o[1]+n[1])/2)}setLabyrinthStart(t){let e=this.getVertexKey(this.center);this.drawNode(t,e,255),console.log(`Starting at ${e}`);let s=[],i=[];return i.push(e),this.adjacencyList.get(e).forEach((r=>{const o=this.vertCoordinates.get(r.node);this.drawNode(t,r.node);const n=o[0]==this.center[0]?"x":"y";this.drawEdge(t,e,r.node,r,n),s.push(r.node),i.push(r.node)})),[s,i]}drawPrimsLabyrinth(t){let[e,s]=this.setLabyrinthStart(t),i=0;for(;e.length>0;){let r=e[Math.floor(Math.random()*e.length)],o=this.adjacencyList.get(r).filter((t=>!s.includes(t.node)));if(o.length>0){let n=o.reduce(((t,e)=>t.weight<e.weight?t:e));const h=this.vertCoordinates.get(r),a=this.vertCoordinates.get(n.node),d=h[0]==a[0]?"x":"y";this.drawEdge(t,r,n.node,n,d),i+=n.weight,console.log(`Adding edge ${r} -> ${n.node} with weight ${n.weight}`),s.push(n.node),this.drawNode(t,n.node),e.push(n.node)}else e=e.filter((t=>t!=r))}}}}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,s),o.exports}(()=>{const t=s(972);new p5((e=>{let s=new t.SquareGrid(7,Math.ceil(7*e.windowHeight/e.windowWidth),e);e.setup=()=>{e.createCanvas(e.windowWidth,e.windowHeight),e.background(0),e.noLoop()},e.draw=()=>{for(let[t,i]of s.vertCoordinates)e.ellipse(i[0],i[1],5,5),e.fill(100);s.drawPrimsLabyrinth(e)}}))})()})();