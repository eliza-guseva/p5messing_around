(()=>{"use strict";var e={972:(e,t)=>{function s(e,t){return Math.floor(100*Math.random())+1}Object.defineProperty(t,"__esModule",{value:!0}),t.SquareGrid=t.Graph=t.genWeight=void 0,t.genWeight=s;class i{constructor(){this.adjacencyList=new Map}getVertexKey(e){return e.toString()}StringToVertex(e){return e.split(",").map(Number)}addVertex(e){const t=this.getVertexKey(e);this.adjacencyList.has(t)||this.adjacencyList.set(t,[])}addEdge(e,t,s){const i=this.getVertexKey(e),r=this.getVertexKey(t);this.adjacencyList.get(i).push({node:r,weight:s}),this.adjacencyList.get(r).push({node:i,weight:s})}printGraph(){for(let[e,t]of this.adjacencyList){const s=t.map((e=>`${e.node}(${e.weight})`)).join(", ");console.log(`${e} -> ${s}`)}}}t.Graph=i,t.SquareGrid=class extends i{constructor(e,t,s){super(),this.center=[Math.floor(e/2),Math.floor(t/2)],this.x_step=s.windowWidth/(e-1),this.y_step=s.windowHeight/(t-1),this.pathXwidth=this.x_step/2.5,this.pathYwidth=this.y_step/2.5,this.x_offset=0,this.y_offset=0,this.generateSquareGrid(e,t),this.vertCoordinates=this.generateSquareDistances(e,t)}printGraph(){console.log(`The grid with center at ${this.center} has the following graph:`),super.printGraph()}generateSquareGrid(e,t){for(let i=0;i<e;i++)for(let e=0;e<t;e++){const t=[i,e];if(this.addVertex(t),i>0){const r=[i-1,e],o=s();this.addEdge(t,r,o)}if(e>0){const r=[i,e-1],o=s();this.addEdge(t,r,o)}}}generateSquareDistances(e,t){let s=new Map;for(let i=0;i<e;i++)for(let e=0;e<t;e++)s.set(this.getVertexKey([i,e]),[this.x_offset+i*this.x_step,this.y_offset+e*this.y_step]);return s}drawNode(e,t,s=100){const i=this.vertCoordinates.get(t);e.ellipse(i[0],i[1],this.x_step/3,this.y_step/3),e.fill(s)}drawEdge(e,t,s,i,r=100){const o=this.vertCoordinates.get(t),n=this.vertCoordinates.get(s);let h=o[0]==n[0]?"y":"x";e.stroke(r),"x"==h?e.strokeWeight(this.x_step/2.5):e.strokeWeight(this.y_step/2.5),e.line(o[0],o[1],n[0],n[1])}setLabyrinthStart(e){let t=this.getVertexKey(this.center);console.log(`Starting at ${t}`);let s=[],i=[];i.push(t);const r=this.adjacencyList.get(t);return console.log(`Neighbors of ${t}: ${r.map((e=>e.node))}`),r.forEach((r=>{console.log(`Drawing edge ${t} -> ${r.node}`),this.vertCoordinates.get(r.node),this.drawEdge(e,t,r.node,r),console.log(`Done drawing edge ${t} -> ${r.node}`),s.push(r.node),i.push(r.node)})),[s,i]}drawPrimsLabyrinth(e){let[t,s]=this.setLabyrinthStart(e),i=0;for(;t.length>0;){let r=t[Math.floor(Math.random()*t.length)],o=this.adjacencyList.get(r).filter((e=>!s.includes(e.node)));if(o.length>0){let n=o.reduce(((e,t)=>e.weight<t.weight?e:t));this.vertCoordinates.get(r),this.vertCoordinates.get(n.node),this.drawEdge(e,r,n.node,n),i+=n.weight,s.push(n.node),t.push(n.node)}else t=t.filter((e=>e!=r))}}}}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,s),o.exports}(()=>{const e=s(972);new p5((t=>{let s=new e.SquareGrid(49,Math.ceil(49*t.windowHeight/t.windowWidth),t);t.setup=()=>{t.createCanvas(t.windowWidth,t.windowHeight),t.background(0),t.noLoop()},t.draw=()=>{t.stroke(100),t.fill(100),t.circle(s.center[0]*s.x_step,s.center[1]*s.y_step,50);for(let[e,i]of s.vertCoordinates)t.ellipse(i[0],i[1],5,5);s.drawPrimsLabyrinth(t)}}))})()})();